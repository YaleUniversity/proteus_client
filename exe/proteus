#!/usr/bin/env ruby

####
# proteus cli -
# Provides frontend CLI access to the Bluecat proteus API
#
# Usage:
# ./proteus command [command options] [arguments...]
#

require 'awesome_print'
require 'cri'
require 'yaml'
require 'ostruct'
require 'netaddr'
require 'proteus'
require 'cli'

include ProteusCli

SUBCOMMANDS = %w(AliasCommands EntityCommands ExternalHostCommands HostCommands Ipv4Commands NetworkCommands MacCommands MacPoolCommands)

def configure(opts)
  if opts[:config_file]
    $stdout.puts "Reading configuration from #{opts[:config_file]}."
    @config = OpenStruct.new(YAML.load_file(opts[:config_file]))
  else
    @config = OpenStruct.new(
      {
        url: opts[:url] || ENV['PROTEUS_URL'],
        username: opts[:username] || ENV['PROTEUS_USER'],
        password: opts[:password] || ENV['PROTEUS_PASS'],
        viewid: opts[:viewid] || ENV['PROTEUS_VIEWID'],
        loglevel: opts[:loglevel] || 'warn'
      }
    )
  end
end

def proteus
  c = Proteus::Client.new(@config.to_h).login!
  yield(c)
rescue Proteus::ApiEntityError::EntityNotFound => e
  exit_2("Proteus Error, Entity Not Found: #{e.message}")
rescue => e
  exit_2("Proteus Error: #{e.message}")
ensure
  c.logout!
end

def exit_2(msg)
  $stderr.puts msg
  exit 2
end

root_cmd = Cri::Command.new_basic_root.modify do
  name        'proteus'
  usage       'proteus [command, command, ...] [options] [arguments]'
  summary     '#AllyourDNSRecords are belong to us.'
  description 'Provides access to proteus DNS and IP management through a CLI.'

  option nil, :username, 'Proteus username ENV:PROTEUS_USER', argument: :required
  option nil, :config_file, 'Location of a config (override env/flags)', argument: :required
  option nil, :loglevel, 'Log level (debug|info|warn|error)', argument: :required
  option nil, :password, 'Proteus password ENV:PROTEUS_PASS', argument: :required
  option nil, :url, 'Proteus URL ENV:PROTEUS_URL', argument: :required
  option nil, :viewid, 'Default view id ENV:PROTEUS_VIEWID', argument: :required
end

root_cmd.define_command do
  name    'info'
  usage   'info'
  summary 'displays proteus system information'

  run do |opts, _args|
    configure(opts)
    $stdout.puts 'System Information:'
    ap proteus { |c| c.system_info }
  end
end

SUBCOMMANDS.each do |m|
  m_cmd = Object.const_get(m).instance_method(:define_root).bind(self).call(root_cmd)
  Object.const_get(m).instance_method(:define_sub).bind(self).call(m_cmd)
end

root_cmd.run(ARGV)
